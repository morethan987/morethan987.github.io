


[{"content":" 总结 CUMCM2024 比赛经验，针对数学建模国赛 A 题和MATLAB改进的代码协同方案 流程概览 # graph LR; id1(\"工作分配\")--\u003eid2(\"VS Code协同\")--\u003eid3(\"MATLAB代码执行\"); 工作分配 # 主要有两个要点：\n划分为两个部分，一个主要部分和次要部分； 划分的任务之间不要有依赖关系 代码协同 # 软件工具 # VS Code 编辑器，以及 Live Server 插件，MATLAB 插件，matlab-formatter 格式化插件\nMATLAB\n命名规范 # 主函数统一命名为 main：能够直接计算出最终答案的叫主函数，其他的都叫辅助函数 数据加工代码：数据加工代码指的是没有任何返回值，仅仅产生数据表格的代码，用 data 开头，例如：将太阳高度角 \\(\\phi\\) 转化为余弦值，dataCosPhi 内部数据转换代码，用 to 连接，例如将自然坐标系中点的坐标转化为直角坐标系中点的坐标 StoXY 绘图代码：绘制图形的代码，用 fig 开头 测试代码：test 开头 其余需要特殊定义的代码：根据功能，返回布尔值的用 is 开头，如判断碰撞函数 isCollided；返回其他数据的用 get 开头 文件说明注释 # 除了上面命名规范里面提及的一些常见类型的文件不用添加参数外，即 data，test，fig，main 这四个，其余的都应该在文件内添加说明性注释；\n简明而清晰的文件说明注释：文件说明一般在文件开头，包含函数功能概述、函数接受参数、函数输出参数三个主要部分\n实在不会写，用 AI 帮助就行；\n内部变量命名 # 统一的固定参数 # 所有固定的参数全部都放置到根目录下的一个 config.m 文件中，进行统一管理，每个参数后面请添加注释说明，例如：\nlearningRate = 0.001; % 学习率 batchSize = 32; % 每批输入的数据量 numEpochs = 100; % 迭代次数 在其他代码中引用这个配置文件只需要加入代码：\nrun(\u0026#39;config.m\u0026#39;); 尽管参数被转移到了其他地方但是 VS Code 仍然能够进行自动检测并给出补全提示！ 函数内部使用的参数 # 函数内部所有使用的变量都应该在主程序开始之前明确定义，并在变量后添加简要的中文注释；\n如果有一些表达相同含义的参数在多个文件中使用，请使用统一的命名，尤其是 AI 生成的代码，请在 VS Code 中使用 F2 进行重命名 代码格式化 # 代码的格式化主要通过 matlab-formatter 格式化插件来实现：在启动插件之后，在 VS Code 中使用快捷键 Ctrl+Shift+P 呼出命令面板，搜索 格式化，然后回车选中 使用...来格式化代码，然后选择 matlab-formatter 回车即可\nGit 版本控制 # 这里需要新建一个 GitHub 代码仓库来存放整个项目文件。尽管使用了 Live Server 插件能够更加快速地执行代码协同，但是仍然需要在一些重要的开发结点进行提交保存，保留代码的回滚能力。\n所有的 Git 版本控制操作都在代码负责人的电脑上操作，其他辅助编程人员使用 Live Server 插件进行更实时的代码协同。\n本地 commit 保存小改进 push 操作以小题为单位进行，保存重大进展 代码执行 # 在 VS Code 里面直接运行 MATLAB 代码会出现一些奇怪的问题，因此运行代码请在 MATLAB 原生环境中运行\n其他 # AI 指令集 # 由于生成式 AI 的代码规范可能与项目不同，因此如果有生成一整个文件的需求，请在你的指令之前添加如下的代码规范指令：\n你是一个成熟而规范的MATLAB程序员，在正确实现用户目标的前提下，遵守以下代码规范： 1. 简明而清晰的文件说明注释：文件说明一般在文件开头，包含函数功能概述、函数接受参数、函数输出参数三个主要部分 2. 函数内部的变量命名应当简明易读 3. 函数内部所有使用的变量都应该在主程序开始之前明确定义，并在变量后添加简要的中文注释 用户指令： 配套样例项目 # 样例项目 代码技巧 # 并行运行 MATLAB 能够支持多线程计算，仅需将一般的 for 循环改写为 parfor 即可 parfor 函数的执行要求十分严格，具体参阅官方说明 大型表格处理 # 模型计算的输出往往是一个超大型数据表格，并且存储在 .mat 文件中，难以进行数据的快速提取。\n直接编写了一个简单的 Python 脚本来进行大型表格数据的提取操作：数据提取器\n同时配合 LaTeX 在线表格编辑网站，能够实现在论文中快速插入表格数据。\n","date":"2025-01-16","externalUrl":null,"permalink":"/blog/code-collaboration-scheme/","section":"Blogs","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  总结 CUMCM2024 比赛经验，针对数学建模国赛 A 题和MATLAB改进的代码协同方案\n\u003c/div\u003e\n\n\n\n\u003ch2 class=\"relative group\"\u003e流程概览 \n    \u003cdiv id=\"%E6%B5%81%E7%A8%8B%E6%A6%82%E8%A7%88\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%B5%81%E7%A8%8B%E6%A6%82%E8%A7%88\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cdiv class=\"mermaid\" align=\"center\"\u003e\n  \ngraph LR;\nid1(\"工作分配\")--\u003eid2(\"VS Code协同\")--\u003eid3(\"MATLAB代码执行\");\n\n\u003c/div\u003e\n\n\n\n\u003ch2 class=\"relative group\"\u003e工作分配 \n    \u003cdiv id=\"%E5%B7%A5%E4%BD%9C%E5%88%86%E9%85%8D\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%B7%A5%E4%BD%9C%E5%88%86%E9%85%8D\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e主要有两个要点：\u003c/p\u003e","title":"代码协同方案","type":"blog"},{"content":" MySQL 安装部署流程 + 简明语法 CookBook + 学习笔记 信息源 # SQL教程 - 廖雪峰的官方网站 非常非常亲民的 MySQL 教程网站，内置了一个网页版的数据库，方便新手同志们直观了解 MySQL数据库的操作，对于 SQL 的整个背景也有简洁但必要的表述。 安装 MySQL # 安装 MySQL 最简单的方法就是通过 Docker Desktop 来操作；只需要两步就能够完成\n命令行中运行：\ndocker pull mysql 初始化 SQL 并运行：\ndocker run -d --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password -v /Users/liaoxuefeng/mysql-data:/var/lib/mysql mysql 参数解释：\n参数 含义 -d 表示后台运行 --name 表示容器的名字，不输入 Docker 会自动选择一个名字 -p 3306:3306 表示把容器的端口 3306 映射到本机，这样可以在本机通过 3306 端口连接 MySQL -e MYSQL_ROOT_PASSWORD=password 表示传入一个环境变量，作为root的口令，这里设置的口令是 password，不输入此项则会自动生成一个口令，需要查看日志才能知道口令，建议设置 -v /path:/var/lib/mysql 表示将本地目录映射到容器目录 /var/lib/mysql 作为 MySQL 数据库存放的位置，需要将 /path 改为你的电脑上的实际目录 mysql 告诉 Docker 你要运行的镜像的名称 使用 Docker 运行 MySQL 时，任何时候都可以删除 MySQL 容器并重新运行；如果删除了本地映射的目录，重新运行就相当于一个全新的 MySQL ； MySQL 基础语法 # 查询 # 注释语法：\n-- 这是一条注释 基本查询语法：\nSELECT * FROM \u0026lt;表名\u0026gt;; 条件查询：\nSELECT * FROM \u0026lt;表名\u0026gt; WHERE \u0026lt;条件表达式\u0026gt;; 其中条件表达式内部还可以使用各种逻辑运算关键词，如：AND，NOT，OR\n投影查询：\nSELECT \u0026lt;列1\u0026gt;, \u0026lt;列2\u0026gt;, \u0026lt;列3\u0026gt; FROM \u0026lt;表名\u0026gt;; SELECT \u0026lt;列1\u0026gt; 别名1, \u0026lt;列2\u0026gt; 别名2, \u0026lt;列3\u0026gt; 别名3 FROM \u0026lt;表名\u0026gt;; 排序：\n-- 按score从低到高: SELECT id, name, gender, score FROM students ORDER BY score; -- 按score从高到低: SELECT id, name, gender, score FROM students ORDER BY score DESC; -- 按score, gender排序: SELECT id, name, gender, score FROM students ORDER BY score DESC, gender; -- 带WHERE条件的ORDER BY: SELECT id, name, gender, score FROM students WHERE class_id = 1 ORDER BY score DESC; 分页查询：\n-- 查询第1页: SELECT id, name, gender, score FROM students ORDER BY score DESC LIMIT 3 OFFSET 0; -- 从第0条记录开始查，往后查最多3条，也可以不足3条 聚合查询，利用 MySQL 中的聚合函数来查询：\n-- 使用聚合查询, 查询记录的总条数: SELECT COUNT(*) FROM students; -- 使用聚合查询并设置结果集的列名为num: SELECT COUNT(*) num FROM students; -- 使用聚合查询并设置WHERE条件: SELECT COUNT(*) boys FROM students WHERE gender = \u0026#39;M\u0026#39;; 虽然 COUNT(*) 的结果是一个标量，但是返回仍然是一个二维表格，只是表格只有一行一列 另外还有一些常用的聚合函数：MAX()，MIN()，AVG()，SUM() 等，与 COUNT() 类似\n分组聚合查询：\n-- 按class_id分组进行聚合查询, 类似于for循环: SELECT COUNT(*) num FROM students GROUP BY class_id; -- 注意这里没有选中class_id因此最后的结果表格没有id -- 按class_id分组, 并显示class_id: SELECT class_id, COUNT(*) num FROM students GROUP BY class_id; -- 多个分组标准, 例如按class_id, gender分组: SELECT class_id, gender, COUNT(*) num FROM students GROUP BY class_id, gender; 多表查询(笛卡尔查询)：\n-- FROM students, classes: SELECT * FROM students, classes; -- 设置别名，同名列通过.操作服进行区分: SELECT students.id sid, students.name, students.gender, students.score, classes.id cid, classes.name cname FROM students, classes; -- 设置报个别名, 更清爽一点点: SELECT s.id sid, s.name, s.gender, s.score, c.id cid, c.name cname FROM students s, classes c; 多表查询的返回依然是一个二维数据表，但是这个数据表是通过笛卡尔积的形式组织的，因此也叫笛卡尔查询\n连接查询，类似于多表查询，但是两个表之间的组织关系不是通过笛卡尔积进行，而是选取一个为主表，将附表的内容进行连接：\n内连接，只有一种，修饰语为 INNER： -- 选出所有学生，同时返回班级名称: SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score FROM students s INNER JOIN classes c ON s.class_id = c.id; 外连接，有三种，修饰语为 RIGHT，LEFT，FULL： -- 使用RIGHT OUTER JOIN: SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score FROM students s RIGHT OUTER JOIN classes c ON s.class_id = c.id; 理解方法：通过集合的方式来理解\n-- 这里面tableA是主表, 也叫左表; tableB同理 SELECT ... FROM tableA ??? JOIN tableB ON tableA.column1 = tableB.column2; 修改 # 插入语法： -- 添加一条新记录: INSERT INTO students (class_id, name, gender, score) VALUES (2, \u0026#39;大牛\u0026#39;, \u0026#39;M\u0026#39;, 80); -- 一次性添加多条新记录: INSERT INTO students (class_id, name, gender, score) VALUES (1, \u0026#39;大宝\u0026#39;, \u0026#39;M\u0026#39;, 87), (2, \u0026#39;二宝\u0026#39;, \u0026#39;M\u0026#39;, 81), (3, \u0026#39;三宝\u0026#39;, \u0026#39;M\u0026#39;, 83); 更新： -- 更新id=1的记录: UPDATE students SET name=\u0026#39;大牛\u0026#39;, score=66 WHERE id=1; -- 更新score\u0026lt;80的记录: UPDATE students SET score=score+10 WHERE score\u0026lt;80; -- 更新id=999的记录, 没有匹配的记录所以什么都不会做: UPDATE students SET score=100 WHERE id=999; -- 不带WHERE语句的更新会作用在整张表上 UPDATE students SET score=60; 删除： -- 删除id=1的记录: DELETE FROM students WHERE id=1; -- 不带WHERE的删除操作会作用于整张表 DELETE FROM students; ","date":"2025-01-15","externalUrl":null,"permalink":"/blog/mysql-basics/","section":"Blogs","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  MySQL 安装部署流程 + 简明语法 CookBook + 学习笔记\n\u003c/div\u003e\n\n\n\n\u003ch3 class=\"relative group\"\u003e信息源 \n    \u003cdiv id=\"%E4%BF%A1%E6%81%AF%E6%BA%90\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E4%BF%A1%E6%81%AF%E6%BA%90\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://liaoxuefeng.com/books/sql/introduction/index.html\" target=\"_blank\"\u003eSQL教程 - 廖雪峰的官方网站\u003c/a\u003e\n非常非常亲民的 MySQL 教程网站，内置了一个网页版的数据库，方便新手同志们直观了解 MySQL数据库的操作，对于 SQL 的整个背景也有简洁但必要的表述。\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch3 class=\"relative group\"\u003e安装 MySQL \n    \u003cdiv id=\"%E5%AE%89%E8%A3%85-mysql\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%AE%89%E8%A3%85-mysql\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003e安装 MySQL 最简单的方法就是通过 Docker Desktop 来操作；只需要两步就能够完成\u003c/p\u003e","title":"MySQL基础","type":"blog"},{"content":" 熟悉项目分析流程，是一个练手性质的分析报告 我在初步完成自己的小插件之后才发现：笔记转博客这个领域似乎没有一个一键式解决方案，为此我写了这篇文章来分析是否要创建一个新的项目来填补这个空白。\n项目没有优劣之分，只有合适与否，这篇文章中涉及的评价标准都是围绕是否符合博客网页要求进行的，因此可能有些项目并不适合做博客网页，但是这丝毫不影响项目本身的价值。\n领域定义 # 在所有分析开始之前，需要对于笔记转博客这个领域有一个清晰的界定。\n笔记：此处的笔记特指 Obsidian 中的笔记，含有 Obsidian Flavored Markdown，这对笔记向网页转换的过程提出了不小的要求。\n博客：博客，顾名思义是一种获得流量的手段，创作者花费时间创作笔记，然后经由转换软件，生成排版精美、功能丰富的博客网页\n评价细则如下：\n隐私方面\n是否本地运行 是否开源 使用舒适性\n与 Obsidian 语法的适配程度 服务部署复杂程度 帮助文档撰写详细程度 个性化调整复杂设置 网页功能完整性\n默认配套网页的核心功能是否齐全（搜索、日间/夜间模式等） 默认网页美观程度 是否支持 SEO 对 Obsidian 原生语法的转化效果是否生硬（例如：展示性链接内是否存在不能翻译的代码块、是否舍弃部分 Obsidian 语法特性等） 项目概述 # 在我的设想中，这个项目的功能就是构建一个 Obsidian 插件，实现从 Obsidian 笔记到 Hugo 博客网页的无缝导出，支持 Obsidian 的所有基本核心功能。\n成效：大大降低了创建博客网页的成本，只要能够使用 Obsidian 就能够拥有属于自己的博客网页。\n市场和用户可行性分析 # 市场需求分析 # 概述 # 基本需求：搭建个人网站并持续输出的需求，包括自我提升、自我表达、创造独特全面的个人能力展示平台（对接企业招聘）等等\n目标用户群：重度 Obsidian 用户且有分享笔记的需求；想要搭建个人博客但是因为技术难度而放弃的知识创作者\n相关数据 # Flowershow：截至 2024 年 10 月插件下载量为 3355；截至 2025 年 1 月插件下载量为 4594，同时最高下载量的插件有 3211992 的下载量； Quartz 截至 2025 年 1 月收获 GitHub start 数量为 7.7k 已有方案 # Quartz # 推荐指数：❤️‍🔥❤️‍🔥❤️‍🔥❤️‍🔥❤️‍🔥\n介绍 # Quartz 是一个将 Obsidian 笔记转化为网页的工具集。Quartz 的最新版本是 v4 版本，相较于 v3 版本， v4 版本从底层完全重构了代码，去除了对于 Hugo 的依赖，优化了用户自定义的体验。目前 v4 版本主要使用 TypeScript 构建，原本 hugo 的 template 也改用 JSX 替换。\n因此，现在的 Quartz 几乎可以说和 Hugo 没什么关系了，但是目前国内的很多信息还是宣传 Quartz 的底层是 Hugo\n官方样例网站：Welcome to Quartz 4\n评述 # 优点\n功能非常非常完整 所有相关套件中唯一成功解决了展示性 wiki 链接的一个 配套文档很详细 缺点\n几乎没有缺点，唯一一个值得提点的地方就是没有中文的文档 总结：非常优秀的项目，所有在 Obsidian 内显示的样式就是网页中显示的样式，确实也收获了所有现成方案中最多的 GitHub start 数量\nFlowershow # 推荐指数：❤️‍🔥❤️‍🔥❤️‍🔥❤️‍🔥🩶\n介绍 # Flowershow 是一个基于 Obsidian 的整体发布服务，它可以将你的 Obsidian 笔记按照目录结构，转换为一个在线的数字花园网站。而 Vercel 是一个针对前端的云服务，它实现了通过 Github 免服务器快速部署前端服务，每次提交内容都会触发一次自动部署。Flowershow 的官方部署文件中需要使用 Vercel，国内使用可以考虑 Netlify 替换\n参考教程：Flowershow：免费的 Obsidian 笔记发布服务，实现你的数字花园网站\n主观上来讲，这个项目的主创团队是一支很有激情和使命感的队伍，关于 Flowershow 的简介里面包含了很多主创团队的核心理念。\n客观上来讲，Flowershow 的项目定位非常准确，就是一个基于 Obsidian 的博客网页生成平台，因此最终效果从前端和后端两个角度来说都是非常好的。\n评述 # 优点\n定位清晰，工作流程简洁明了 功能支持较为全面 背后有专业的团队进行运维 允许高度的自定义，适合喜欢个性化的创作者 缺点(一下信息均来自 2025 年 1 月)\n部分 Obsidian 的功能并没有处理，例如展示性的 wiki 链接并没有处理，至少介绍文档中跳过了这部分内容 仔细翻找了网站并没有发现反向链接的说明，但是首页信息显示能够支持反向链接 总结：总体上项目做的还是挺好，但是项目还在进行中，部分细节并不到位，对于 Obsidian 语法支持没有那么高要求的创作者就可以采用这个方案了\n官方发布 # 推荐指数：❤️‍🔥❤️‍🔥❤️‍🔥🩶🩶\n介绍 # 下面是几个样例网站：\nObsidian中文教程一个中文教程网站，使用了 Obsidian 官方的发布服务，里面里面可以体现一些功能，例如对于展示性链接的处理 Digital 3D Garden 有深度的前端界面自定义 mister chad 非常简洁工整的小站，内容很充实 Discrete Structures for Computer Science 神似官方的朴素风格 评述 # 优势\n官方发布的网页对于 Obsidian 内部表达的适配效果是一流的，Obsidian 内部所有的功能都能够成功在网页中展示；但是不清楚插件功能如何在网页中展示 有持续的维护服务，能够第一时间适配 Obsidian 的更新 支持高度的个性化设置，如果具有充足的代码经验，可以开发出相当精美的网页；同时还有大量的其他开发者开发的主题 隐私设置，网站能够设置密码，控制访问人员，可能用于企业内部文档管理 有 SEO 加持和移动平台适配，流量可能会更大一些 劣势\n每个月需要支付 8 美元，由于个人网站的流量相当小需要长期持有才会有明显的收益，因此这笔支出不是小数目，这是官方发布服务的致命缺陷 停止付费之后网页将不能被访问 国内的服务支持不佳，流量受限 总结：官方发布适合资金充裕，并且对于网站的自定义开发没有那么高需求的用户。\nDigital Garden # 推荐指数：❤️‍🔥❤️‍🔥❤️‍🔥🩶🩶\n介绍 # Digital Garden 是一款 Obsidian 插件，可以将笔记导出为网页并托管在 GitHub 上，然后再使用 Vercel 或者 Netlify 进行网页的发布。具体操作教程见 Digital Garden教程\n这里是几个样例网站：\nDigital Garden 官方样例 Aaron Youn 民间自制 John\u0026rsquo;s Digital Galaxy 非常丰富的内容，可以详细展示所有 Digital Garden 涉及的特性，特别是展示性链接循环嵌套 评述 # 优点\n功能支持较为全面 支持 Obsidian 的主题迁移 缺点\n对于中文路径不友好 网页界面自定义需要直接处理网页源码，即 HTML JavsScript CSS，并且默认配套的界面不太好看 总结：工作流程非常的简单，功能支持相当的全面，作为插件嵌入 Obsidian 更加轻便。虽然界面美化需要花些功夫，但如果对于界面美观与否并不在意，可以直接上手。\nPerlite # 推荐指数：❤️‍🔥❤️‍🔥🩶🩶🩶\n介绍 # Perlite 是一款网页版 Obsidian 文件阅读器，是 Obsidian 官方发布服务的开源平替。Obsidian Publish的开源替代品Perlite 这是微信公众号上的一个教程文本。\n这款开源平替最大的特点就是：其网页 UI 几乎和 Obsidian 的界面完全相同，提供近乎原生的浏览服务。\n评述 # 优点\n很好地支持几乎所有的 Obsidian 的功能 原生经典界面，给用户提供熟悉感 缺点\n不算是一个博客页面，官方对于项目的定位也确实不是博客网页而是一个“文件阅读器” 需要使用 Docker，启动缓慢，不如插件的那样的轻巧简洁的体验感 总结：Perlite 的定位决定了其并不适合直接用作展示性的博客页面，其界面实在是有点单调，对于访客的视觉吸引力其实并不强。更适合于作为一款网页版的 Obsidian，在上面进行文件的编辑可以更加专注，效果也更好\njekyll+Netlify+GitHub Pages # 推荐指数：❤️‍🔥❤️‍🔥🩶🩶🩶\n介绍 # 方法流程来源于 obsidian 目前最完美的免费发布方案 渐进式教程，教程内容很详细，既有基本的对比评价，也有详细的指导教程\n这是作者构建的例子网站：oldwinterの数字花园\n评述 # 优点\n配置简单 允许高度自定义 缺点\n部分 Obsidian 特色语法不支持，比如 callout 语法 不支持暗色模式 不支持搜索 总结：整体上是一个非常好的 Obsidian 转换为博客网页的实践，但是因为部分核心功能缺失因此并不适合想要完整的网页体验的创作者\nTiddlyWiki # 推荐指数：❤️‍🔥🩶🩶🩶🩶\n介绍 # TiddlyWiki 是一个历史悠久的笔记框架，至今依然有很强的生命力，许多开发者活跃在这个领域中。国内也有相关站点可以供访问：太微舞，以及配套教程：[太微中文教程](https://tw-cn.netlify.app /)；国内的开发者在近年推出的衍生版本 TidGi（太记）;\n利用Tiddlywiki发布Obsidian库这是一个将 Obsidian 发布到 TiddlyWiki 的流程性教程\n此外还有一些散落在互联网上的介绍和样例：\n了不起的“活笔记”系统：TiddlyWiki（太微笔记） - 少数派非常好的一片笔记文章，真正意义上的一文秒懂 TiddlyWiki；文章作者自己的笔记网站：MRIWiki.cn — 磁共振百科知识太微笔记 [太微中文教程](https://tw-cn.netlify.app /)教程本身就是利用 TiddlyWiki 编写的，可以查看 TiddlyWiki 的使用效果 评述 # 优势\n极致的简洁性与轻量化，可以说没有任何其他的个人网页比它更简单！ 经过历史的筛选，拥有广泛的用户群体 成熟的国内服务，不需要科学上网就能够访问 劣势\n由于极致的简洁，导致网页看上去可能有点原始 不算完全的个人博客，其完全不迎合主流搜索引擎，直接靠搜索根本无法访问，难以获得流量（也是我撰写这篇文章之前从未听闻的原因😢） 总结：TiddlyWiki 的确是一个非常简洁和轻量化的笔记框架，这也吸引了很多的用户；但也正是因为其定位并非博客网页，所以导致用户的内容封闭在 TiddlyWiki 社区内部，甚至是封闭在创作者自己手中，无法转化为流量，并不适合有流量需求的创作者，而更加适合作为一个简单纯粹的笔记存储库\n结论 # 在经过完整的分析之前，我并不了解笔记转博客这个领域内部的实际情况，因此萌生了想做一个简化插件项目的想法💡\n但是经过系统性的调查研究，我必须承认 Quartz 确实是这个领域内出类拔萃的项目，无论从 Obsidian 语法适配性、配置流程便捷程度、前端配套界面美观程度、前端界面自定义便捷程度、后端撰写博客便捷程度等等各种方面，几乎都没有上升空间了。\n因此也就不需要我再去启动一个项目来做重复的事情了。在这里向所有笔记转博客领域内的相关项目的开发团队致敬🫡不管是否在文章中提及。\n项目没有优劣之分，只有合适与否，这篇文章中涉及的评价标准都是围绕是否符合博客网页要求进行的，因此可能有些项目并不适合做博客网页，但是这丝毫不影响项目本身的价值。\n向开源先锋致敬🫡🫡🫡\n","date":"2025-01-10","externalUrl":null,"permalink":"/blog/note-to-blog-report/","section":"Blogs","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  熟悉项目分析流程，是一个练手性质的分析报告\n\u003c/div\u003e\n\n\u003cp\u003e我在初步完成自己的\u003ca href=\"https://morethan987.github.io/blog/plugin-writing-experience/\"\u003e小插件\u003c/a\u003e之后才发现：\u003cstrong\u003e笔记转博客\u003c/strong\u003e这个领域似乎没有一个一键式解决方案，为此我写了这篇文章来分析是否要创建一个新的项目来填补这个空白。\u003c/p\u003e","title":"笔记转博客项目分析报告","type":"blog"},{"content":" 博客网站折腾日志，从手搓到 Hugo 的曲折经历。 为什么 Hugo # 最初也只是因为偶然间听说了 Hugo 可以做网页，并且听说编译静态页面非常高效，于是才去搜集的相关资料——据说 Hugo 是世界上最快的静态页面生成器，官方网站也是这么写的。\n当然，口说无凭，下面就是我初次本地编译运行 Hugo 得到的输出，即在完全没有 public 文件夹的情况下的输出：\nZH-CN EN Pages 53 51 Paginator pages 0 0 Non-page files 13 13 Static files 7 7 Processed images 3 0 Aliases 18 17 Cleaned 0 0 Built in 872 ms\n中英文总共 104 个网页页面花费时间 0.872 秒，并且包含构建本地服务的时间，这个速度确实没什么好挑剔的了。并且本地的服务能够实时监听源代码的改动并进行增量重构，这个增量重构的时间取决于改动的多少，一般在 0.03 秒左右。\n我并没有用别的网页生成工具搭建过博客，因此无法给出其他生成器的实际生成速度 参考引用 # 下面是我在搭建博客的过程中所用到的所有资源链接：\n莱特雷-letere 这是一位博主的网页，也是用 Hugo 搭建的，里面同时也有很多其他的网页工具的教程；这是他在 B 站上发布的系列视频教程 Blowfish 这是我使用的一款 Hugo 主题，文档写的相当的好，真的没见过如此耐心的作者。 Hugo官方网页 Hugo Themes 部署全流程 # 搭建 Hugo 环境 # 这一部分在那位博主的网页和视频教程中都有非常详细的讲解，不喜欢看文字的可以去看视频😝\n说实话，Hugo 的环境搭建真的是我见过的最简单的，没有之一。你只需要到 Hugo官方网页去把 Hugo 下载下来，然后存放到合适的文件夹里面，然后解压就完成了，解压之后的文件夹内也只有一个 hugo.exe 文件，简直不要太简单。\nHugo 真的是太方便了，我曾经尝试过 Hexo 但是 Node.js 的配置就把我拒之门外了，到现在我也不知道为什么会编译报错😢 稍微需要那么一点点🤏难度的工作其实就是把 hugo.exe 所在的目录添加到环境变量里面去。\n生成模版系统 # 在 hugo.exe 的目录中打开终端，然后输入命令 hugo new site your-site-name，然后就可以看到一个新的文件夹📂出现在了当前文件夹里面。\n模板系统听着很高级，其实就是在你的 hugo.exe 的同级目录下面建一个文件夹，但是里面的所有文件夹都有特殊的含义，不能随便改动。\n名称 含义 asset 存放网站结构用到的图片，图标等资产 config 网站配置文件夹（初始时可能没有，有些主题需要） hugo.toml 网站配置文件之一 content 所有内容都在这里面 public 是编译后生成的完整网页，一开始没有 themes 存放你的网站主题 主题配置基本操作 # Hugo 的网站主题很多，具体参考 Hugo Themes 你可以选一款你喜欢的主题，然后下载之后就放在 themes 文件夹里面就行。这一部分文字描述非常抽象，见视频教程\n这里有一个重点是：基本上每一个主题都会配置一个样例网站，一般在文件夹 exampleSite 里面，如果实在不想跟着网站文档自己配置，直接用这个样例网站的配置也是可以的。\n每一个不同的主题基本配置完成之后都要进行个性化配置。这里我重点推荐重点推荐一下我使用的主题 Blowfish 相当好的一款主题，向作者致敬🫡\nBlowfish 主题 # Blowfish 官方文档上面已经有了非常非常详细的指导文档，不再过多赘述。任何一个多余的字都是对于如此详细的指导文档的不尊重🫡\n我这里简要说明一些可能出现的问题，下面的内容你可能需要仔细阅读官方文档之后才能明白其中含义🤔\n在 params.homepage.showRecent = false 的情况下，为什么还会显示\u0026quot;最近文章\u0026quot;？ 如果遇到这个问题，说明你跟我一样懒惰🤪直接套用了 exampleSite 的代码。这是因为控制主页面的接口不止这一个，还有一个在 layouts\\partials\\home\\custom.html 文件中。\n如果你不介意那么直接忽略就行，如果你介意（跟我一样🤪），那就把文件中的下面的代码注释掉👇\n\u0026lt;section\u0026gt; {{ partial \u0026#34;recent-articles-demo.html\u0026#34; . }} \u0026lt;/section\u0026gt; 为什么我使用 svg 格式的 logo 无法完成(日间/夜间)模式的切换？ 这是我发现的一个 bug，已经给主题作者推送我改进的代码了，详见代码改进或 SVG 支持\n为什么浏览器窗口上的小图标一直都是 blowfish，即使改换了 logo 也不行？ 官方文档其实是有写的，但藏的太深了，见局部模板(Partials) · Blowfish\n说实话，官方文档写的真的好👍一套完整流程走下来竟然只有这么点不太容易理解的错误😋\n配套插件 # 我日常习惯使用 Obsidian 来写文章，由于 Obsidian 的格式与 Blowfish 的格式还是有较为明显的区别，二者的格式转换非常麻烦🤔\n在查询了一圈之后，发现根本就没有适合的插件！于是，我自己开发了一个插件：Hugo-Blowfish-Exporter\n虽然插件功能很简单，但是也已经覆盖了我自己绝大部分的使用功能，包括：\n- callout（支持所有官方的 callout 名称，需要新增图标）\n- 内联数学公式（Blowfish 支持块级公式）\n- mermaid（支持 mermaid 图表）\n- 图片插入（能够自动导出图片）\n- Wiki链接导出（并不支持展示性链接😢）\n非展示性链接简单处理为网页超链接形式\n展示性链接较为复杂：需要覆写 Blowfish 主题的源代码，通过 mdimporter 这个 shortcode 来进行文件注入；同时为了方便链接，每一个文件都需要设置 slug 属性来标记网站中存放 markdown 文件的文件夹\n对于主题源代码的覆写详见 mdimporter 以及用于去除注入文件开头元数据的 stripFrontMatter；覆写目录参考 GitHub 上的配置\n这个插件也是投入了我巨大的精力，虽然也只有几天时间🤔但是那几天还是挺累的😵‍💫\n如果这个插件帮助了你，还请转发分享；如果你对于这个插件的功能不满意，你也可以在 GitHub 上向我提交 Issue🫡或者熟悉代码的朋友可以直接把源码拿去修改，注释很完整，代码比较规范🤗\n如果你能把你亲自修改升级的代码也分享给我（在 GitHub 上提交 Pull Request）那更是万分感谢！☺️\n写在最后 # 一个博客网站的搭建只是万里长征的第一步，真正困难的还是博客内容的填充。\n正如我在一次写插件的经历中所写，很多个人博客网站从一开始的火热到最终的沉寂可能只需要短短一年的时间。\n在这个生活节奏越来越快的时代，无意义、无效率的事情大多都会向高效让步，曾经的初心与梦想往往会向生活妥协。我自己也早已经没有了当初的热情，行为方式上也更加的像一个真正的成年人。\n但是我仍然是有些不甘心，这个网站就是一种抗争吧，我会尽力维护下去，这也是我写插件方便我更新博客的目的所在。\n因此希望这篇教程所提供的内容能够帮助到正在准备搭建自己的博客网站的你，你我共勉🫡\n","date":"2025-01-07","externalUrl":null,"permalink":"/blog/hugo-blog/","section":"Blogs","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  博客网站折腾日志，从手搓到 Hugo 的曲折经历。\n\u003c/div\u003e\n\n\n\n\u003ch2 class=\"relative group\"\u003e为什么 Hugo \n    \u003cdiv id=\"%E4%B8%BA%E4%BB%80%E4%B9%88-hugo\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88-hugo\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e最初也只是因为偶然间听说了 Hugo 可以做网页，并且听说编译静态页面非常高效，于是才去搜集的相关资料——据说 Hugo 是\u003cstrong\u003e世界上最快\u003c/strong\u003e的静态页面生成器，官方网站也是这么写的。\u003c/p\u003e","title":"Hugo博客搭建","type":"blog"},{"content":" 记一次写插件的经历，以及从中收获的一些感想。 缘由 # 事情起源于我这个博客网站。我在微信公众号上偶然间浏览到了关于用 Hugo 建立博客网站的信息，正好我也想翻新一下我那简陋的小网站。我原来的小网站非常非常的原始，整个写作流程都需要在 HTML JS 和 CSS 之间狼狈地切换。并且我非常崇拜的大佬 Lilian Weng 的 博客 也是用 Hugo 搭建的，这也更加坚定了我换底层的决心。\n于是我便迅速开始了对于 Hugo 的接触。\n结果真的出乎意料！我原来的网页花费了我将近一个月的时间，用 Hugo 竟然不到一上午就搞定了。更令我惊讶的是 Hugo 作为一个用 Go 编写的程序，其竟然不需要用户搭建 Go 环境！😮\n同时，我也发现了一个非常用心的 Hugo 主题 Blowfish 。这真的是我见过的文档配置最为详细的一个项目，没有之一(๑•̀ㅂ•́)و✧\n在 Hugo 和 Blowfish 的强力驱动下，我的小网站竟然变得像模像样的了。当然请原谅我并不擅长美化页面，所以我就直接套用了 Blowfish 官方网站的界面设置，因为我觉得任何的改动都会让这个精美的页面变得不协调。\n说实话，做完这一切我并没有什么特别的情绪波动，除了敬佩 Hugo 和 Blowfish 的作者们强悍的编码能力。\n直到我想将我在 Obsidian 中大量的笔记都上传到这个博客网站。\n原创的苦涩 # 我发现在 Obsidian 中并没有现成的可以直接适配 Blowfish 主题的格式转换插件。于是在前面那“愉快体验”的助推下，我决定自己写一个插件！(😄虽然过一会儿就笑不出来了😢)\n后面的经历实在是没什么好描述的，一遍又一遍地在网页之间来回切换，不停地搜索各种API文档，与AI机器人的沟通也从未停止。经过了无数次修改，我终于写出来了一个再简单不过的东西：识别文档中的固定模式然后进行内容替换。\n令人哭笑不得，相比于创建网站那短短的几个小时，我这将近四十个小时的工作几乎可以说微不足道。有那么一瞬间我真的想直接删掉我那几百行的代码。\n是的，就这么一个简单的插件就让我心力交瘁，疲惫不堪。我亲口品尝到了原创的苦涩。\n现在让我回头看 Hugo 和 Blowfish 我感受到了深深的震撼，如此复杂的功能实现不知道要消耗多少精力。如果说他们的工作都是付费的，那我还能心安理得地接受如此的工作量。然而他们都是开源的，有没有收入全凭用户喜好。\n我看着 Blowfish 作者那停滞在2024年3月的博客，我陷入了沉思。\n情怀与理想 # 我猜想 Blowfish 的作者肯定是因为别的什么事情暂时放缓了对于这个主题的维护，毕竟这个项目并没有带来多少实际的收入。\n突然之间我回想起了之前那些被我忽略的现象，一些 GitHub 达人主页上满满的绿色瓷砖慢慢变得稀疏，最后消失。在这平静如水的变化之下，或许是一个人生活的转变。或因生活工作忙碌，或因开发动力逐渐衰减，但最后原本的热血初心都淹没在了寂静之中。我无法阻止这样的现象发生，但我理解这背后的原因。\n开源是情怀，但是情怀不能当饭吃。人总是要活在当下的。\n我想起来 bilibili 上的一位博主 码农高天 ，一位 Python 的核心开发者，用幽默诙谐的段子吐槽开源人的悲惨待遇。他那年纪轻轻就已经花白的头发让人不经感慨“生活真是不容易啊”——写了大半辈子的代码，现在竟然还是待业在家，靠着发发视频赚点外快。\n写在最后 # 人生不如意，十之八九。我又一次看着那四十多小时的工作成功，笑着摇了摇头。\n写完这一句，我就睡觉去了，现在是2025年1月6日凌晨1:48，明天还有英语的期末考试，还没复习呢。\n我看着这篇博客，又一次笑着摇了摇头。\n这就是生活。\n","date":"2025-01-06","externalUrl":null,"permalink":"/blog/plugin-writing-experience/","section":"Blogs","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  记一次写插件的经历，以及从中收获的一些感想。\n\u003c/div\u003e\n\n\n\n\u003ch3 class=\"relative group\"\u003e缘由 \n    \u003cdiv id=\"%E7%BC%98%E7%94%B1\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E7%BC%98%E7%94%B1\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003e事情起源于我这个博客网站。我在微信公众号上偶然间浏览到了关于用 \u003ccode\u003eHugo\u003c/code\u003e 建立博客网站的信息，正好我也想翻新一下我那简陋的小网站。我原来的小网站非常非常的原始，整个写作流程都需要在 \u003ccode\u003eHTML\u003c/code\u003e \u003ccode\u003eJS\u003c/code\u003e 和 \u003ccode\u003eCSS\u003c/code\u003e 之间狼狈地切换。并且我非常崇拜的大佬 \u003ccode\u003eLilian Weng\u003c/code\u003e 的 \u003ca href=\"https://lilianweng.github.io/\" target=\"_blank\"\u003e博客\u003c/a\u003e 也是用 \u003ccode\u003eHugo\u003c/code\u003e 搭建的，这也更加坚定了我换底层的决心。\u003c/p\u003e","title":"一次写插件经历","type":"blog"},{"content":" 某些问题机器能够非常容易解决，而对于人类而言非常复杂；反之亦然。\n这种反常悖论似乎来源于知识的可概括性，某些知识具有良好的可压缩性，但另外一些则不具有。有一个更加准确的概念叫做计算可约性\n一个很简单的例子：考试，从逻辑上来说全部都是基于最基本的知识推理而来的对吧？讲道理，考试应该能够完全通过逻辑推理来解决所有问题。但是事实上，考过试的都知道，从阅读题目到形成解题思路的过程貌似并不那么“有逻辑”，甚至可以说是没有什么技巧可言，纯粹就是一种做题的感觉。\n两类知识 # 在现有知识的基础上，能够通过有限的符号逻辑表达式得到的知识；其特点就是精确，高度概括；问题边界明确，能够清晰定义已知条件有什么、通过什么样的方法、得出什么样的结果；在明确的已知条件下能够精准预测问题结果的规律（在问题的考虑范围内没有“概率”这个概念的容身之处） 对于那些难以根据已知条件，通过精确的逻辑推理得到结果的问题，我们采用统计性的尝试，得出的有一定价值的规律；特点是基于大量尝试，难以定义问题的边界，甚至难以获取需要的已知条件，就是这种恶劣的条件下，强行匹配已知条件与结果的联系，进而得出的规律，其结果具有波动性、不确定性、局部正确性。 两类知识的占比 # 明显可概括的知识远远少于不可概括的知识；可概括的知识从某种意义上来说是不可概括知识的特殊情况；\n不可概括向可概括转化的趋势 # 不可概括知识的特点决定了其获取的难度（大量尝试消耗大量能量，这一步不可避免），运转不可概括性知识的能量消耗极高（知识难以概括就会占用大量的资源来维持运转），不可概括的知识难以跨过人类个体生命的边界（不可概括的知识往往会随着个体生命的消散而丢失，因为其难以概括从而难以以任何媒介形式流传，但机器智能似乎在这方面有本质的区别）；人类个体的能量十分有限，难以完全依靠不可概括知识来应对外部世界，因此会有从不可概括知识向可概括知识转化的特点，尽管这个过程对于个体而言相当困难、极其耗费能量（本身就是一个不可概括的知识），但从整个人类的角度上来说节省了海量的能量；\n可接受功率决定了智能的上限 # 在这里似乎可以给出另外一个划分智能等级的标准：个体接受功率输入的级别，级别越高其，个体能掌握的不可概括知识越多；由于能量总是有限的（我们人类能消耗的能源级别可能是这个地球上面的资源，但是机器智能的消耗可能是恒星级别的），因此总会有一定程度上的知识概括，但是由于不可概括知识的固有性质，高等级智能的可概括知识对于低等级智能来说并不是可概括的；知识的可概括性具有相对性；\n从这里可以看出，可接受功率对于一个智能系统来说具有关键意义。从另一个角度来说，或许我们能够人为降低机器智能可消耗功率的上限来观察不可概括知识向可概括知识转化的过程\n","date":"2025-01-03","externalUrl":null,"permalink":"/blog/moravecs-paradox/","section":"Blogs","summary":"\u003cblockquote\u003e\n\u003cp\u003e某些问题机器能够非常容易解决，而对于人类而言非常复杂；反之亦然。\u003c/p\u003e","title":"关于莫拉维克悖论的思考","type":"blog"},{"content":" 前言 # 这篇文章主要是对于 CUMCM 2024 的比赛全过程进行一个梳理和总结。\n我们的队伍是在 2023 年的冬天组起来的，CUMCM 2024 也是我们第一次参与“数学建模”比赛。经过了大大小小的模拟赛，最终进入了全国的比赛。在提交最终论文之后获得省级一等奖并推荐国家级一等奖，最终获得国家级二等奖。\n整个过程有振奋惊喜，也有失落遗憾；我们在比赛中应该是做对了一部分事情，因此我们初次参赛就获得了国家级奖项；但不足肯定是有的，毕竟从“推荐国家级一等奖”变成“国家级二等奖”总是有理由的。\n总之，这次经历着实是令人难忘，更加值得梳理和总结经验，为明年的比赛作准备。\nCUMCM 全称为 Chinese Undergraduate Mathmatical Contest in Modeling；民间称呼为“数模国赛” 用词说明 # 用词 说明 计算系统 传统意义上的建模过程，即封装一个超大的函数 优化系统 用于优化计算系统中可调参数的系统，生成最优参数配置 计算流 计算系统中输入数据的处理过程 计算流结点 工作流中关键性的中间步骤 优化流 优化系统的主体逻辑 论文主体内容 包括摘要、重述、计算流和优化流的描述、结果展示与分析，也就是论文收尾之前的所有内容 论文收尾 包括灵敏度分析和模型推广 客观情况 # 任务分工 # 虽然比赛有很多个选题可供选择，但是我们小组选择专攻优化类问题，也就是 A 题。\n我：建模 + 代码 + 部分论文撰写 CL：建模 + 论文撰写 + 部分代码 HWJ：论文美化 工作流程 # 整个 A 题的代码部分大致可以分为两个系统：\n计算系统： 功能：接受输入数据与参数，返回需要的结果 性质：直接由题目决定，不同题目有不同的计算系统，需要临时构建 优化系统： 功能： 接受计算系统并将其作为可优化的目标函数，执行自身的优化逻辑，最后返回计算结果 性质：方法体系较为成熟，可以在比赛前就进行多种优化系统的准备 论文撰写部分分为：\n整体框架：由 LaTeX 模板决定 主体内容填充：对工作流和优化流的清晰描述 排版和美化：调整各个部分的详略，搭配说明性的图片（流程图，示意图） 收尾内容 预建模 # 目标：在精确理解题目的前提条件下，迅速进行初步的建模，基本确定建模方向、计算方法；\n预计用时：3h\n工作：队伍所有成员都进行全网资料查询，看看有没有基本命中题目的文献资料\n命中成功：最理想的情况，这个时候直接研读论文，收集思路即可； 命中失败：虽然没有现成的资料可供参考，但是在查阅文献的过程中或多或少也积累了一定的思路 建模初期 # 总目标：构建足够精确的、适配优化方法的计算系统\n建模：明确输入数据在各个计算流结点之间的操作 代码：用代码实现计算流，实现数据可视化 论文：填充第一个小问的内容，并初步排版 预计用时：30h\n工作：\n所有队员一起进行建模，优先明确建模思路，给出完整的数学推导过程 我和 CL：代码实现与论文内容填充同步进行 HWJ：绘制无法用代码生成的更加生动的示意图 建模中期 # 总目标：构建合适的优化系统\n建模：根据计算系统的特殊性，选择最为匹配的优化系统 代码：在实现优化系统的过程中进行微小改动，匹配计算系统 论文：完成论文的主体部分，开始进行局部细节微调 预计用时：20h\n工作：与前面类似只不过工作的中心从代码编写转到了论文撰写\n精简论文，此时的论文非常臃肿 微调论文的逻辑，使得上下文关联度更高 美化排版，减少文字，增加图片 建模后期 # 基本建模完成了，全员进行漏洞的检查： 错别字、不准确的表述、公式拼写错误等常规检查 优化代码中的注释，让其更加易读 重点检查个人信息 比赛论文中不能保留任何个人信息，包括代码中的文件路径，例如 C:\\Users\\Morethan ；保留个人信息是非常严重的错误！ 实战效果 # 当我们将上述策略应用于实战过程中，也就是 CUMCM 2024 的正式比赛中，得到的效果如下：\n有效用时： 比赛总时长三天，共计 72 小时 队伍从早上七点到晚上八点，除开吃饭用时，一天的有效时间为 12 个小时 时间利用率为 \\(50\\%\\)（对比之下很低🤔） 最终完成工作： 论文主体 28 页 A4 纸 代码部分 35 页 A4 纸，除开每一个小题之间的复用代码，应该有 20 页左右 全文配图共计 25 张 以上数据是论文精简之后的，初稿论文将近 50 页 未完成工作： 最终结果的计算，由于计算量过大（代码效率并不高），最终提前两个小时写完所有代码，但并没有足够的时间运算出结果😭😭 模型的计算精度不够，精度为 1s 没有达到标准答案给出的精度 论文的收尾部分其实并没有完成 优点 # 选题 # 专注于 A 题，在模拟赛中积累了充分的经验，磨合出了一套高效的工作流程\n对于 A 题的方法论构建比较完善\n工作流程 # 工作流程相对清晰，效率较高\n以最终论文为导向，建模、论文、代码三线同时进行，保证了论文内容的充足\n分工 # 采用模糊分工，每个队员都有一个主要分工和次要分工，在各自的主要分工上能够独立工作，在其他的次要分工上面也能够完成一定的工作，大大提高了时间利用率\n队员很给力，因为同时兼顾两个分工任务意味着更多的学习成本\n不足 # 工作流程 # 计划很完美，但是在实践中还是有些必要的环节没有做好\n有效时间占比：晚上八点收工太早了！应该占用更多的时间来进行建模试错，保证模型的正确性和精确性\n分工 # 代码的编写、代码的调试、代码的可视化、结果的计算、结果的可视化所涉及的代码量太大，一人难以搞定；\n因为模糊分工所引起的任务重叠，增加了协同成本\n建模 # 题目理解准确度：这次我们对于题目的理解出现了较大的偏差，导致我们浪费了挺多时间在模型修正上面； 代码 # 代码的效率：之前由于没有时间的限制，导致对于“超长”代码的准备不足，没有代码并行的经验；\n结果精度：一开始建模过于粗糙，并且用了一个不好的特性：将时间步长设置为 1 ，并且将作为数组索引，导致后期难以将时间的步长减小，导致最后结果的精确度不够\n改进方案 # 精心挑选场地，增加有效时间✨是最重要的✨ 分工 # 略微改动人员分工，增加代码方面的人力投入\n在各自的主要分工和次要分工上增加学习投入，增加工作效率\n建模 # 更专注于题目的理解，不能太着急；建模错误再修正是得不偿失的 代码 # 构建一套行之有效的代码协同方案，增强代码编写速度\n着手构建代码编写规范：\n变量命名 文件开头的说明文档 代码编写流程规范 代码并行化：在代码中添加一些可并行的代码，提高运行速度\n所有代码方面的改进最终落实为一个文档！不能光喊口号！ 落实后的方案：代码协同方案 论文 # 研究优秀论文\n关注其论文框架 关注其语言风格、文本可读性、详略、配图逻辑、图片可读性 改进自身\n优化论文主体逻辑框架，细化每一块的内容 语言风格、文本可读性、详略、配图逻辑、图片可读性等等细节的改进 成果以 LaTeX 模板中注释的形式固定！ 总结 # 一份没有满分的答卷比一份满分的答卷更有收获！\n积累应用数学的知识，增强论文撰写能力，提高发现问题的能力，这是比比赛本身更有意义的东西🫡\nCUMCM，每一个数模人都能从中受益🤗\n","date":"2024-09-12","externalUrl":null,"permalink":"/blog/cumcm2024/","section":"Blogs","summary":"\u003ch2 class=\"relative group\"\u003e前言 \n    \u003cdiv id=\"%E5%89%8D%E8%A8%80\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e这篇文章主要是对于 CUMCM 2024 的比赛全过程进行一个梳理和总结。\u003c/p\u003e","title":"CUMCM 2024总结","type":"blog"},{"content":" 创建虚拟环境 # 创建 # 一些常规的代码例子如下👇\n# 创建虚拟环境 python -m venv your_env_name # 指定python版本创建虚拟环境，如果你的python是默认安装路径 python -m venv your_env_name --python=python3.11 # python是自定义的安装路径 D:\\Python\\Python311\\python.exe -m venv your_env_name 下面有一些可选参数用于创建自定义的虚拟环境：\n参数名 含义 --system-site-packages 创建的虚拟环境将包含全局Python环境中的包，这可以避免重复安装一些常用的包 --clear 如果指定的虚拟环境目录已经存在，这会清除目录中的所有内容，然后重新创建虚拟环境 --version 用于确认虚拟环境中 Python 的版本 所有的参数说明都可以通过运行 python -m venv -h 来获得；不用到处查文档了~😆 激活 # 默认情况下，虚拟环境处于非激活状态。在“your_env_name/Scripts/”目录下将有一个名为“activate”的文件，用命令行运行即可。\n# 激活虚拟环境 your_env_name/Scripts/activate 程序打包 # 我们经常需要把自己写的 Python 程序分享出去。然而只分享源代码会使得不太懂代码的用户非常苦恼，因为源代码的运行还需要搭建本地运行环境，因此打包程序应运而生。\npyinstaller # 安装非常简单，就像别的 Python 包一样 pip install pyinstaller 即可；使用时在目标文件所在的目录启动终端，然后运行命令即可。\n特点：打包速度较快；打包后的程序较大\n常见的命令代码：\n# 将main.py文件打包为一个独立的可执行文件；可执行文件运行后禁用命令行窗口 pyinstaller -F -w main.py # 将main.py文件打包为一个工程文件夹；可执行文件运行后启用命令行窗口 pyinstaller -D main.py 参数 说明 -h, --help 显示帮助信息并退出 -v, --version 显示程序版本信息并退出 -F, --onefile 将所有内容打包为一个独立的可执行文件 -D, --onedir 将所有内容打包为一个目录（默认选项） -w, --windowed, --noconsole 禁用命令行窗口（仅对 Windows 有效） -c, --console, --nowindowed 使用命令行窗口运行程序（默认选项，仅对 Windows 有效） -a, --ascii 不包含 Unicode 字符集支持（默认包含） -d, --debug 产生 debug 版本的可执行文件 -n NAME, --name=NAME 指定生成的可执行文件或目录的名称（默认为脚本名称） -o DIR, --out=DIR 指定 spec 文件的生成目录（默认为当前目录） -p DIR, --path=DIR 设置 Python 导入模块的路径（类似设置 PYTHONPATH） -i \u0026lt;FILE\u0026gt;, --icon \u0026lt;FILE\u0026gt; 设置可执行文件的图标（支持 .ico 或 .icns 格式） --distpath DIR 指定生成的可执行文件的输出目录（默认为 ./dist） --workpath WORKPATH 指定临时工作文件的目录（默认为 ./build） --add-data \u0026lt;SRC;DEST or SRC:DEST\u0026gt; 添加额外的数据文件或目录到可执行文件中（Windows 使用分号，Linux/OSX 使用冒号分隔源路径和目标路径） --add-binary \u0026lt;SRC;DEST or SRC:DEST\u0026gt; 添加额外的二进制文件到可执行文件中 --hidden-import MODULENAME 添加未自动检测到的模块 --exclude-module EXCLUDES 排除指定的模块 --clean 清理 PyInstaller 缓存和临时文件 --log-level LEVEL 设置构建时控制台消息的详细程度（可选值：TRACE、DEBUG、INFO、WARN、ERROR、FATAL） Nuitka # 将 Python 代码打包为 exe 可执行文件，转换原理是先将 Python 代码转换为 C 代码，然后再编译 C 代码。\n特点：打包速度相当慢；需要额外安装 C 编译器，尽管可以自动完成但是对于内存空间管理非常严格的用户并不适用；打包后的程序体积很小（实测是 pyinstaller 的十分之一）\n安装命令：\npip install -U nuitka 常见使用命令：\n# 将main.py文件打包为一个exe文件，使用链式优化，完成打包后清理临时文件 python -m nuitka --lto=yes --remove-output --onefile main.py 参数 说明 --standalone 创建一个包含所有依赖的独立可执行文件夹。 --onefile 将所有内容打包为一个单独的 .exe 文件。 --optimize=N 设置优化级别（0、1 或 2），数字越大，优化越多。 --lto 启用链接时优化（Link Time Optimization），可选值为 no、yes 或 thin。 --enable-plugin=\u0026lt;plugin_name\u0026gt; 启用指定插件，如 tk-inter、numpy、anti-bloat 等。 --output-dir=\u0026lt;dir\u0026gt; 指定编译输出目录。 --remove-output 编译完成后删除中间生成的 .c 文件和其他临时文件。 --nofollow-imports 不递归处理任何导入模块。 --include-package=\u0026lt;package_name\u0026gt; 显式包含整个包及其子模块。 --include-module=\u0026lt;module_name\u0026gt; 显式包含单个模块。 --follow-import-to=\u0026lt;module/package\u0026gt; 指定递归处理的模块或包。 --nofollow-import-to=\u0026lt;module/package\u0026gt; 指定不递归处理的模块或包。 --include-data-files=\u0026lt;source\u0026gt;=\u0026lt;dest\u0026gt; 包含指定的数据文件。 --include-data-dir=\u0026lt;directory\u0026gt; 包含整个目录的数据文件。 --noinclude-data-files=\u0026lt;pattern\u0026gt; 排除匹配模式的数据文件。 --windows-icon-from-ico=\u0026lt;path\u0026gt; 设置 Windows 可执行文件的图标。 --company-name, --product-name, --file-version, --product-version, --file-description 设置 Windows 可执行文件的属性。 ","date":"2024-08-10","externalUrl":null,"permalink":"/blog/pytips/","section":"Blogs","summary":"\u003ch2 class=\"relative group\"\u003e创建虚拟环境 \n    \u003cdiv id=\"%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\n\n\u003ch3 class=\"relative group\"\u003e创建 \n    \u003cdiv id=\"%E5%88%9B%E5%BB%BA\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%88%9B%E5%BB%BA\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003e一些常规的代码例子如下👇\u003c/p\u003e","title":"Python小技巧","type":"blog"},{"content":" 引用文献 # 我对于贝叶斯优化的理解也并不多，主要参考下面的内容👇\n【机器学习】一文看懂贝叶斯优化/Bayesian Optimization\n一文详解贝叶斯优化（Bayesian Optimization）原理\n贝叶斯优化(BayesianOptimization)\n超参数优\u0026mdash;贝叶斯优化及其改进（PBT优化）\n贝叶斯优化 (Bayesian Optimization)\nMATLAB官方文档\n优点和算法原理 # 这里重点描述贝叶斯优化的优点以及其算法原理。如果你只关注“怎么用”，可以先了解贝叶斯优化的优点，然后跳转到#MATLAB用法\n优点 # 算法原理 # MATLAB用法 # 代码一览 # % 定义目标函数 function y = objectiveFcn(x) y = (1 - x.x1)^2 + 100 * (x.x2 - x.x1^2)^2; end % 定义优化变量 vars = [optimizableVariable(\u0026#39;x1\u0026#39;, [-2, 2]) optimizableVariable(\u0026#39;x2\u0026#39;, [-2, 2])]; % 执行贝叶斯优化 results = bayesopt(@objectiveFcn, vars, ... \u0026#39;AcquisitionFunctionName\u0026#39;, \u0026#39;expected-improvement-plus\u0026#39;, ... \u0026#39;MaxObjectiveEvaluations\u0026#39;, 30, ... \u0026#39;IsObjectiveDeterministic\u0026#39;, true, ... \u0026#39;Verbose\u0026#39;, 1); % 查看结果 bestPoint = results.XAtMinObjective; bestObjective = results.MinObjective; fprintf(\u0026#39;最优解 x1: %.4f, x2: %.4f\\n\u0026#39;, bestPoint.x1, bestPoint.x2); fprintf(\u0026#39;最优目标值: %.4f\\n\u0026#39;, bestObjective); 参数说明 # Params Meaning AcquisitionFunctionName 选择采集函数，这决定了算法在每次采样之后如何选取下一个采样点 MaxObjectiveEvaluations 最大迭代轮次 IsObjectiveDeterministic 如果目标函数是确定的，不包含噪声，则设置为 true ；否则设置为 false Verbose 决定了结果输出的详细程度，所有的输出可能包含多张图表 每个参数具体的可选值见官方文档: bayesopt；官方写的相当细致，还有很多样例。\n数学建模人必会技能之一就是读文档😝 ","date":"2024-08-05","externalUrl":null,"permalink":"/blog/bayesianopt/","section":"Blogs","summary":"\u003ch2 class=\"relative group\"\u003e引用文献 \n    \u003cdiv id=\"%E5%BC%95%E7%94%A8%E6%96%87%E7%8C%AE\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%BC%95%E7%94%A8%E6%96%87%E7%8C%AE\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e我对于贝叶斯优化的理解也并不多，主要参考下面的内容👇\u003c/p\u003e","title":"贝叶斯优化","type":"blog"},{"content":" 背景提要 # 你应该知道如何通过命令行与电脑交互，包括但不限于：Windows如何唤出命令行/终端，正在运行中的命令什么时候结束\u0026hellip;\u0026hellip;\n懂一点点翻墙的技术，OverLeaf是个国外的软件,与之硬相关的latex项目也是国外的，因此下载相关依赖的时候能够直接接受国外流量会省掉很多麻烦。如果你没有VPN的话就需要为每一个包管理工具指定一个国内源，但有时候国内源更新并不及时。\n懂一些Vim的基本操作，比如：如何开启插入模式，如何保存退出，不保存退出等\n部署全流程 # 安装Linux # 在 Windows App Store 里面直接搜索一个Linux发行版本并下载，笔者选择的是Kali。安装完成后可以在开始菜单中直接打开，打开后会跳出命令行窗口，初次打开需要填写需要用户名与密码进行注册。\n此时你的命令行应该有一个 Warning 提示。这是因为你还没有安装 WSL(Windows Subsystem for Linux)；同时，在填写密码的时候你的输入不会显示在命令行，但已经被记录了 为什么需要一个Linux系统？因为OverLeaf的sharelatex模型需要Linux环境。也正因如此，据说在Linux系统上运行的OverLeaf更加流畅。\n安装WSL # 安装WSL2，直接在Windows命令行中运行：\nwsl --install 这个程序安装后也可以直接打开，打开后也有一个Warning提示。这时候需要在 C:\\Users\\ASUS 目录下面写入一个text文件，然后重命名为 .wslconfig；\n写入内容为：\n[experimental] autoMemoryReclaim=gradual # gradual | dropcache | disabled networkingMode=mirrored dnsTunneling=true firewall=true autoProxy=true 安装Docker # 进入 Docker 官网下载Docker，这是sharelatex模型运行的容器。Docker是一个开源的应用容器引擎，其中包括，镜像、容器、仓库，目的就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的产品及其环境能够做到“一次封装，到处运行”。就像一个集装箱，由程序员开发并封装，用户使用时就直接把整个集装箱搬过去。\nDocker安装完成后就可以双击启动放后台了，我们后面通过命令行来操作Docker；\n拉取镜像 # 打开 Kali，直接运行\ngit clone https://github.com/overleaf/toolkit.git ./overleaf-toolkit 然后连续运行：\ncd ./overleaf-toolkit bin/init vim ./config/variables.env 此时你应该已经进入了一个文档界面，这就是Vim文本编辑器的界面。Vim有很多快捷键，其中按下\u0026quot;I\u0026quot;键即可开启插入模式，进行文本编辑，按下\u0026quot;esc\u0026quot;即可返回常规模式。在插入模式下输入：OVERLEAF_SITE_LANGUAGE=zh-CN\n输入完成后按下\u0026quot;esc\u0026quot;返回常规模式，直接键入 :wq 这是“保存并退出”，如果你不小心输错了可以 :e! 放弃所有更改重头再来。这一步是让你的OverLeaf界面显示为中文。\n当你成功保存并退出，回到熟悉的Kali命令行界面后运行 bin/up 此时正在拉取sharelatex镜像以及相关的网络工具。这时会有大量的数据传输，要保证网络通畅（梯子要稳！）\n配置用户 # 当上一个命令成功结束之后，运行 bin/start ；此时你打开Docker点进sharelatex，你应该可以看到代码“爆闪”，如果没有红色的消息，那应该是正常运行了。\n这时打开浏览器访问网址 http://localhost/launchpad\n按照提示注册Administrator Account之后，就会跳转到 http://localhost/project ；这时基本的OverLeaf网页已经可以显示了。\n但现在你丢一个文件进去编译多半是会报错的 ᕕ( ᐛ )ᕗ ；因为此时 sharelatex 里面的宏包严重不足，不是红包「手动狗头」 安装扩展包 # 打开 Kali 进入对应目录运行 bin/shell 然后逐条执行：\ncd /usr/local/texlive # 下载并运行升级脚本 wget http://mirror.ctan.org/systems/texlive/tlnet/update-tlmgr-latest.sh sh update-tlmgr-latest.sh -- --upgrade # 更换texlive的下载源 tlmgr option repository https://mirrors.sustech.edu.cn/CTAN/systems/texlive/tlnet/ # 升级tlmgr tlmgr update --self --all # 安装完整版texlive（时间比较长，不要让shell断开） tlmgr install scheme-full # 退出sharelatex的命令行界面 exit # 重启sharelatex容器 docker restart sharelatex 重启后再次进入 shell，运行：\napt update # 安装字体 apt install --no-install-recommends ttf-mscorefonts-installe fonts-noto texlive-fonts-recommended tex-gyre fonts-wqy-microhei fonts-wqy-zenhei fonts-noto-cjk fonts-noto-cjk-extra fonts-noto-color-emoji fonts-noto-extra fonts-noto-ui-core fonts-noto-ui-extra fonts-noto-unhinted fonts-texgyre # 安装pygments apt install python3-pygments # 安装beamer之类的 apt install texlive-latex-recommended apt install texlive-latex-extra # 安装英文字体 echo \u0026#34;yes\u0026#34; | apt install -y --reinstall ttf-mscorefonts-installer # 安装中文字体 apt install -y latex-cjk-all texlive-lang-chinese texlive-lang-english cp fonts/* /usr/share/fonts/zh-cn/ cd /usr/share/fonts fc-cache -fv # 更新字体缓存 fc-list :lang=zh-cn fc-match Arial 最后在shell目录里面运行：\nvim /usr/local/texlive/2023/texmf.cnf 进入配置文件，在最底下加入一句 shell_escape = t\n我也不知道这有什么用，属于是前辈传承了🤔 注意，如果Texlive(扩展包的官名)版本不同的话，目录地址也会有所变化，因此需要根据实际的地址来填写，例如将2023改成2024。\n在Linux命令行中可以用 ls -l 来查看当前目录下所有的文件 部署成功 # 现在你就可以愉快地使用本地版OverLeaf了，没有编译超时的困扰~\n如果非常巧合，你也是个CQUer，这里附赠一份重庆大学的毕业论文模板，炒鸡的亲民哦：CQUThesis\n","date":"2024-07-12","externalUrl":null,"permalink":"/blog/localoverleaf/","section":"Blogs","summary":"\u003ch2 class=\"relative group\"\u003e背景提要 \n    \u003cdiv id=\"%E8%83%8C%E6%99%AF%E6%8F%90%E8%A6%81\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E8%83%8C%E6%99%AF%E6%8F%90%E8%A6%81\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e你应该知道如何通过命令行与电脑交互，包括但不限于：Windows如何唤出命令行/终端，正在运行中的命令什么时候结束\u0026hellip;\u0026hellip;\u003c/p\u003e","title":"本地 OverLeaf 部署","type":"blog"},{"content":"","date":"2025-01-16","externalUrl":null,"permalink":"/blog/","section":"Blogs","summary":"","title":"Blogs","type":"blog"},{"content":"CUMCM 英文全称为 Chinese Undergraduate Mathmatical Contest in Modeling，中文全称为“全国大学生数学建模竞赛”。\n由于这个比赛并不能直接参与国家级总决赛，而是要经过校赛省赛的选拔，然后你的论文才会被交给全国的专家进行评审。因此这个比赛民间细分为三个，即数模校赛，数模省赛和数模国赛。\n","date":"2025-01-16","externalUrl":null,"permalink":"/tags/cumcm/","section":"标签","summary":"\u003cp\u003e\u003ccode\u003eCUMCM\u003c/code\u003e 英文全称为 Chinese Undergraduate Mathmatical Contest in Modeling，中文全称为“全国大学生数学建模竞赛”。\u003c/p\u003e","title":"CUMCM","type":"tags"},{"content":"","date":"16 January 2025","externalUrl":null,"permalink":"/en/series/mathmodel/","section":"Seires","summary":"","title":"MathModel","type":"series"},{"content":"","date":"2025-01-16","externalUrl":null,"permalink":"/tags/matlab/","section":"标签","summary":"","title":"MATLAB","type":"tags"},{"content":" 欢迎来到我的信息页面 👋 # 基本信息 # Morethan 是我随手起的一个英文名字，因为这个词语的发音和我的中文名字实在是太像了🙃\n我现在还是一个本科生 ᕕ( ᐛ )ᕗ 其他的没什么好写的🫠\n博客定位 # 个人知识库：用来存放一些固定的技术流程和有意义的经历\n微型论文栈：尽可能按照标准论文流程来编写一些博客，为毕业论文做准备\n知识输出平台：将我所学尽可能清晰地表达出来\n最后 # 如果你觉得有内容帮助了你，请点击文章开头的“喜欢” 🤗\n如果你想分享某些内容，请标注援引自此网站 🫡\n如果你找到了一些错误之处，请在 GitHub 上提交一个Issue 🥰\n","date":"2025-01-16","externalUrl":null,"permalink":"/authors/morethan/","section":"作者列表","summary":"\u003ch1 class=\"relative group\"\u003e欢迎来到我的信息页面 👋 \n    \u003cdiv id=\"%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E4%BF%A1%E6%81%AF%E9%A1%B5%E9%9D%A2-\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E4%BF%A1%E6%81%AF%E9%A1%B5%E9%9D%A2-\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e基本信息 \n    \u003cdiv id=\"%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eMorethan\u003c/code\u003e 是我随手起的一个英文名字，因为这个词语的发音和我的中文名字实在是太像了🙃\u003c/p\u003e","title":"Morethan","type":"authors"},{"content":" ","date":"2025-01-16","externalUrl":null,"permalink":"/tags/","section":"标签","summary":"\u003chr\u003e","title":"标签","type":"tags"},{"content":"这里存放着一些学习笔记与微型论文，通过知识输出来达到知识巩固的目的。\n透过这些文字希望你也能有所收获🤗\n","date":"2025-01-16","externalUrl":null,"permalink":"/","section":"欢迎来到Morethan的小站","summary":"\u003cp\u003e这里存放着一些学习笔记与微型论文，通过知识输出来达到知识巩固的目的。\u003c/p\u003e","title":"欢迎来到Morethan的小站","type":"page"},{"content":"数学建模 就是使用数学模型来精确地、系统地描述生活中的对象，是数学与实践的重要结合。\n","date":"2025-01-16","externalUrl":null,"permalink":"/series/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/","section":"系列","summary":"\u003cp\u003e\u003ccode\u003e数学建模\u003c/code\u003e 就是使用数学模型来\u003cstrong\u003e精确地、系统地\u003c/strong\u003e描述生活中的对象，是数学与实践的重要结合。\u003c/p\u003e","title":"数学建模","type":"series"},{"content":" ","date":"2025-01-16","externalUrl":null,"permalink":"/series/","section":"系列","summary":"\u003chr\u003e","title":"系列","type":"series"},{"content":"","date":"2025-01-16","externalUrl":null,"permalink":"/authors/","section":"作者列表","summary":"","title":"作者列表","type":"authors"},{"content":"","date":"2025-01-15","externalUrl":null,"permalink":"/tags/mysql/","section":"标签","summary":"","title":"MySQL","type":"tags"},{"content":"","date":"15 January 2025","externalUrl":null,"permalink":"/en/series/operation/","section":"Seires","summary":"","title":"Operation","type":"series"},{"content":"","date":"2025-01-15","externalUrl":null,"permalink":"/series/%E6%8A%80%E6%9C%AF%E6%B5%81%E7%A8%8B/","section":"系列","summary":"","title":"技术流程","type":"series"},{"content":"","date":"2025-01-10","externalUrl":null,"permalink":"/tags/hugo/","section":"标签","summary":"","title":"Hugo","type":"tags"},{"content":"","date":"2025-01-10","externalUrl":null,"permalink":"/tags/%E6%8A%A5%E5%91%8A/","section":"标签","summary":"","title":"报告","type":"tags"},{"content":"","date":"2025-01-10","externalUrl":null,"permalink":"/tags/%E5%8D%9A%E5%AE%A2/","section":"标签","summary":"","title":"博客","type":"tags"},{"content":"","date":"7 January 2025","externalUrl":null,"permalink":"/en/tags/blog/","section":"Tags","summary":"","title":"Blog","type":"tags"},{"content":"","date":"6 January 2025","externalUrl":null,"permalink":"/en/series/casual-essay/","section":"Seires","summary":"","title":"Casual Essay","type":"series"},{"content":"","date":"6 January 2025","externalUrl":null,"permalink":"/en/tags/experience/","section":"Tags","summary":"","title":"Experience","type":"tags"},{"content":"","date":"2025-01-06","externalUrl":null,"permalink":"/tags/%E7%BB%8F%E5%8E%86/","section":"标签","summary":"","title":"经历","type":"tags"},{"content":"","date":"2025-01-06","externalUrl":null,"permalink":"/series/%E9%9A%8F%E7%AC%94/","section":"系列","summary":"","title":"随笔","type":"series"},{"content":"","date":"2025-01-03","externalUrl":null,"permalink":"/tags/ai/","section":"标签","summary":"","title":"AI","type":"tags"},{"content":"","date":"2025-01-03","externalUrl":null,"permalink":"/series/ai%E9%81%90%E6%83%B3/","section":"系列","summary":"","title":"AI遐想","type":"series"},{"content":"","date":"3 January 2025","externalUrl":null,"permalink":"/en/tags/imagination/","section":"Tags","summary":"","title":"Imagination","type":"tags"},{"content":"","date":"3 January 2025","externalUrl":null,"permalink":"/en/series/wild-imagination-of-ai/","section":"Seires","summary":"","title":"Wild Imagination of AI","type":"series"},{"content":"","date":"2025-01-03","externalUrl":null,"permalink":"/tags/%E9%81%90%E6%83%B3/","section":"标签","summary":"","title":"遐想","type":"tags"},{"content":"","date":"2024-09-12","externalUrl":null,"permalink":"/tags/math/","section":"标签","summary":"","title":"Math","type":"tags"},{"content":"","date":"2024-08-10","externalUrl":null,"permalink":"/tags/python/","section":"标签","summary":"","title":"Python","type":"tags"},{"content":"","date":"2024-07-12","externalUrl":null,"permalink":"/tags/latex/","section":"标签","summary":"","title":"LaTeX","type":"tags"},{"content":"","date":"2024-07-12","externalUrl":null,"permalink":"/tags/overleaf/","section":"标签","summary":"","title":"Overleaf","type":"tags"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"}]